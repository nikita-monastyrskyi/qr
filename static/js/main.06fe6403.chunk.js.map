{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","result","isOpened","facingMode","handleScan","data","_this","setState","handleError","err","console","error","handleClick","handleChange","e","target","value","react_default","a","createElement","className","this","Fragment","lib_default","delay","onError","onScan","style","width","FormControl","marginTop","marginBottom","display","Select","onChange","inputProps","name","id","MenuItem","Button_default","color","size","position","bottom","variant","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mSAQqBA,6MACnBC,MAAQ,CACNC,OAAQ,YACRC,UAAU,EACVC,WAAY,iBAGdC,WAAa,SAAAC,GACPA,GACFC,EAAKC,SAAS,CACZN,OAAQI,OAKdG,YAAc,SAAAC,GACZC,QAAQC,MAAMF,MAGhBG,YAAc,WACZN,EAAKC,SAAS,CAAEL,UAAWI,EAAKN,MAAME,cAGxCW,aAAe,SAAAC,GACbR,EAAKC,SAAS,CAAEJ,WAAYW,EAAEC,OAAOC,iFAIrC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACZC,KAAKrB,MAAME,UACVe,EAAAC,EAAAC,cAAAF,EAAAC,EAAAI,SAAA,KACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACbH,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CAEEM,MAAO,IACPC,QAASJ,KAAKb,YACdkB,OAAQL,KAAKjB,WACbuB,MAAO,CAAEC,MAAO,WAGpBX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAaF,MAAO,CAAEG,UAAW,GAAIC,aAAc,GAAIC,QAAS,UAC9Df,EAAAC,EAAAC,cAACc,EAAA,EAAD,CACEjB,MAAOK,KAAKrB,MAAMG,WAClBwB,MAAO,CAACC,MAAO,KACfM,SAAUb,KAAKR,aACfsB,WAAY,CACVC,KAAM,MACNC,GAAI,eAGNpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAUtB,MAAO,eAAjB,eACAC,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAUtB,MAAO,QAAjB,0BAKPK,KAAKrB,MAAME,UAAYe,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAUC,KAAKrB,MAAMC,QAC1DgB,EAAAC,EAAAC,cAACoB,EAAArB,EAAD,CACEsB,MAAM,UACNC,KAAK,QACLd,MAAO,CAAEe,SAAU,QAASC,OAAQ,IACpCC,QAAQ,YACRC,QAASxB,KAAKT,aAEbS,KAAKrB,MAAME,SAAW,gBAAkB,gBAjElB4C,aCIbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.06fe6403.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport Button from \"@material-ui/core/Button\";\nimport \"./App.css\";\nimport FormControl from \"@material-ui/core/es/FormControl/FormControl\";\nimport Select from \"@material-ui/core/es/Select/Select\";\nimport MenuItem from \"@material-ui/core/es/MenuItem/MenuItem\";\n\nexport default class App extends Component {\n  state = {\n    result: \"No result\",\n    isOpened: true,\n    facingMode: \"environment\"\n  };\n\n  handleScan = data => {\n    if (data) {\n      this.setState({\n        result: data\n      });\n    }\n  };\n\n  handleError = err => {\n    console.error(err);\n  };\n\n  handleClick = () => {\n    this.setState({ isOpened: !this.state.isOpened });\n  };\n\n  handleChange = e => {\n    this.setState({ facingMode: e.target.value });\n  };\n\n  render() {\n    return (\n      <div className=\"grid\">\n        {this.state.isOpened && (\n          <>\n            <div className=\"qr\">\n              <QrReader\n                // facingMode={this.state.facingMode}\n                delay={300}\n                onError={this.handleError}\n                onScan={this.handleScan}\n                style={{ width: \"100%\" }}\n              />\n            </div>\n            <FormControl style={{ marginTop: 10, marginBottom: 20, display: \"block\" }}>\n              <Select\n                value={this.state.facingMode}\n                style={{width: 200}}\n                onChange={this.handleChange}\n                inputProps={{\n                  name: \"age\",\n                  id: \"age-simple\"\n                }}\n              >\n                <MenuItem value={\"environment\"}>Rear camera</MenuItem>\n                <MenuItem value={\"user\"}>Front-facing camera</MenuItem>\n              </Select>\n            </FormControl>\n          </>\n        )}\n        {this.state.isOpened && <p className=\"result\">{this.state.result}</p>}\n        <Button\n          color=\"primary\"\n          size=\"large\"\n          style={{ position: \"fixed\", bottom: 30 }}\n          variant=\"contained\"\n          onClick={this.handleClick}\n        >\n          {this.state.isOpened ? \"Close scanner\" : \"Scan\"}\n        </Button>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}